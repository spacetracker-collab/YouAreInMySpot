{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Swipeable Card Add swipeable card-like widgets for games or interactive onboarding screens","title":"Home"},{"location":"more/","text":"More License BSD 2-Clause Other The version of this package was released on May 1, 2020. This package was extracted from my app Shots . Check it out!","title":"More"},{"location":"more/#more","text":"","title":"More"},{"location":"more/#license","text":"BSD 2-Clause","title":"License"},{"location":"more/#other","text":"The version of this package was released on May 1, 2020. This package was extracted from my app Shots . Check it out!","title":"Other"},{"location":"quick-start/","text":"Quick start Installation Add swipeable_card to your pubspec.yaml : dependencies : flutter : sdk : flutter # added below swipeable_card : <latest version> Basic example SwipeableWidget ( child: CardExample ( text: \"This is card\" ), nextCards: [ CardExample ( text: \"This is the card\" ), CardExample ( text: \"This is third card\" ), ] onLeftSwipe: () => print ( \"Card swiped!\" ), onRightSwipe: () => print ( \"Card swiped!\" ), ) See the Example for more details. It contains a detailed write up on how to use the swipeable widget controller too.","title":"Quick start"},{"location":"quick-start/#quick-start","text":"","title":"Quick start"},{"location":"quick-start/#installation","text":"Add swipeable_card to your pubspec.yaml : dependencies : flutter : sdk : flutter # added below swipeable_card : <latest version>","title":"Installation"},{"location":"quick-start/#basic-example","text":"SwipeableWidget ( child: CardExample ( text: \"This is card\" ), nextCards: [ CardExample ( text: \"This is the card\" ), CardExample ( text: \"This is third card\" ), ] onLeftSwipe: () => print ( \"Card swiped!\" ), onRightSwipe: () => print ( \"Card swiped!\" ), ) See the Example for more details. It contains a detailed write up on how to use the swipeable widget controller too.","title":"Basic example"},{"location":"examples/basic/","text":"Basic example Explanation (see example_route.dart ) We have a list of containers (the \"cards\") that we would like the user to swipe. This beahviour is commonly seen in card games or dating apps. // CardExample is a custom container with a nice border and rounded corners final List < CardExample > cards = [ CardExample ( color: Colors . red , text: \"First card\" ), CardExample ( color: Colors . blue , text: \"Second card\" ), CardExample ( color: Colors . orange ), CardExample ( color: Colors . indigo ), CardExample ( color: Colors . green , text: \"The next card is the last\" ), CardExample ( color: Colors . purple , text: \"This is the last card\" ), ]; The user should first see the card \"First card\", which is red, so the currentCardIndex is initialized to 0 . In the Scaffold , we see an Align widget with the following children: if ( currentCardIndex < cards . length ) SwipeableWidget ( cardController: _cardController , animationDuration: 500 , horizontalThreshold: 0.85 , // (1) child: cards [ currentCardIndex ], nextCards: < Widget > [ // show next card // if there are no next cards, show nothing if ( ! ( currentCardIndex + 1 >= cards . length )) // (2) Align ( alignment: Alignment . center , child: cards [ currentCardIndex + 1 ], ), ], onLeftSwipe: () => swipeLeft (), onRightSwipe: () => swipeRight (), ) else // if the deck is complete, add a button to reset deck Center ( child: FlatButton ( child: Text ( \"Reset deck\" ), onPressed: () => setState (() => currentCardIndex = 0 ), ), ), What's going on here? See the comments in the code for the labels (1) and (2) . This is the card on top which the user sees. It is a SwipeableWidget , so users can interact with it and swipe it away. It's child is the cards[currentCardIndex] , so it is the 1st card initially. This is the card behind the current card. The user cannot interact with it. It is cards[currentCardIndex + 1] , so it's the 2nd card initially. You may put as many widgets as you want in nextCards . They will be stacked over each other. As the value of currentCardIndex , increases, the card the user sees (1) and card behind that (2) are both increased appropriately. So when the front card (1) is swiped, currentCardIndex++ is called. This gives an appearance that the card has moved away. What's actually happened is that the SwipeableWidget is putting itself back (with the next card) in the center right after it's animated out. What seems to be happening? This is what the users see: The card is discarded (gone) Next card comes into focus What actually happens? This is what's going on under the hood. The card is animated out of the screen After a delay, the card is moved back to the center without any animaton. Using state management ( setState in this case) to show the next card. In short , the card in the nextCards list. Try removing it to see what happens! Note: It is your job to handle showing the user the next card. In this simple example, to show the next card, all that needs to be done is add 1 to currentCardIndex . This is done by the onLeftSwipe and onRightSwipe functions: void swipeLeft () { print ( \"card swiped to the left\" ); // going to next card setState (() { currentCardIndex ++ ; }); } void swipeRight () { print ( \"card swiped to the left\" ); // going to next card setState (() { currentCardIndex ++ ; }); } What about the if statements? They're just there to prevent the app from erroring when the user has reached the end of the deck. When the user is on the last purple card, they won't see a card behind it. And once this last card is swiped, a button will be shown which resets the deck on press. By resetting the deck, it just sets currentCardIndex to 0 . If you're making a game, you may want to get a new list of cards or randomize the the order of the cards first. Using the SwipeableWidgetController This allows you to swipe the cards without having the user touch or pan them. Pass the SwipeableWidgetController like so: SwipeableWidgetController _cardController = SwipeableWidgetController (); ... SwipeableWidget ( cardController : _cardController , ... ) Now you can call the following functions: - _cardController.triggerSwipeLeft() - _cardController.triggerSwipeRight() Check out the cardControllerRow widget: Widget cardController ( SwipeableWidgetController cardController ) { return Row ( mainAxisAlignment: MainAxisAlignment . spaceAround , children: < Widget > [ FlatButton ( child: Text ( \"Left\" ), onPressed: () => cardController . triggerSwipeLeft (), ), FlatButton ( child: Text ( \"Right\" ), onPressed: () => cardController . triggerSwipeRight (), ), ], ); } Tapping on the buttons swipes the cards to the left and right respectively. Improvements you can make 1. Make cards look more natural To do this, you can use the Tranform widgets to rotate the cards by a randomly generated angle, or even change the offset. 2. Disable users from swiping cards If you do need to disable a card, wrap SwipeableWidget with IgnorePointer . Check out this video for more information.","title":"Basic example"},{"location":"examples/basic/#basic-example","text":"","title":"Basic example"},{"location":"examples/basic/#explanation-see-example_routedart","text":"We have a list of containers (the \"cards\") that we would like the user to swipe. This beahviour is commonly seen in card games or dating apps. // CardExample is a custom container with a nice border and rounded corners final List < CardExample > cards = [ CardExample ( color: Colors . red , text: \"First card\" ), CardExample ( color: Colors . blue , text: \"Second card\" ), CardExample ( color: Colors . orange ), CardExample ( color: Colors . indigo ), CardExample ( color: Colors . green , text: \"The next card is the last\" ), CardExample ( color: Colors . purple , text: \"This is the last card\" ), ]; The user should first see the card \"First card\", which is red, so the currentCardIndex is initialized to 0 . In the Scaffold , we see an Align widget with the following children: if ( currentCardIndex < cards . length ) SwipeableWidget ( cardController: _cardController , animationDuration: 500 , horizontalThreshold: 0.85 , // (1) child: cards [ currentCardIndex ], nextCards: < Widget > [ // show next card // if there are no next cards, show nothing if ( ! ( currentCardIndex + 1 >= cards . length )) // (2) Align ( alignment: Alignment . center , child: cards [ currentCardIndex + 1 ], ), ], onLeftSwipe: () => swipeLeft (), onRightSwipe: () => swipeRight (), ) else // if the deck is complete, add a button to reset deck Center ( child: FlatButton ( child: Text ( \"Reset deck\" ), onPressed: () => setState (() => currentCardIndex = 0 ), ), ),","title":"Explanation (see example_route.dart)"},{"location":"examples/basic/#whats-going-on-here","text":"See the comments in the code for the labels (1) and (2) . This is the card on top which the user sees. It is a SwipeableWidget , so users can interact with it and swipe it away. It's child is the cards[currentCardIndex] , so it is the 1st card initially. This is the card behind the current card. The user cannot interact with it. It is cards[currentCardIndex + 1] , so it's the 2nd card initially. You may put as many widgets as you want in nextCards . They will be stacked over each other. As the value of currentCardIndex , increases, the card the user sees (1) and card behind that (2) are both increased appropriately. So when the front card (1) is swiped, currentCardIndex++ is called. This gives an appearance that the card has moved away. What's actually happened is that the SwipeableWidget is putting itself back (with the next card) in the center right after it's animated out.","title":"What's going on here?"},{"location":"examples/basic/#what-seems-to-be-happening","text":"This is what the users see: The card is discarded (gone) Next card comes into focus","title":"What seems to be happening?"},{"location":"examples/basic/#what-actually-happens-this-is-whats-going-on-under-the-hood","text":"The card is animated out of the screen After a delay, the card is moved back to the center without any animaton. Using state management ( setState in this case) to show the next card. In short , the card in the nextCards list. Try removing it to see what happens! Note: It is your job to handle showing the user the next card. In this simple example, to show the next card, all that needs to be done is add 1 to currentCardIndex . This is done by the onLeftSwipe and onRightSwipe functions: void swipeLeft () { print ( \"card swiped to the left\" ); // going to next card setState (() { currentCardIndex ++ ; }); } void swipeRight () { print ( \"card swiped to the left\" ); // going to next card setState (() { currentCardIndex ++ ; }); }","title":"What actually happens? This is what's going on under the hood."},{"location":"examples/basic/#what-about-the-if-statements","text":"They're just there to prevent the app from erroring when the user has reached the end of the deck. When the user is on the last purple card, they won't see a card behind it. And once this last card is swiped, a button will be shown which resets the deck on press. By resetting the deck, it just sets currentCardIndex to 0 . If you're making a game, you may want to get a new list of cards or randomize the the order of the cards first.","title":"What about the if statements?"},{"location":"examples/basic/#using-the-swipeablewidgetcontroller","text":"This allows you to swipe the cards without having the user touch or pan them. Pass the SwipeableWidgetController like so: SwipeableWidgetController _cardController = SwipeableWidgetController (); ... SwipeableWidget ( cardController : _cardController , ... ) Now you can call the following functions: - _cardController.triggerSwipeLeft() - _cardController.triggerSwipeRight() Check out the cardControllerRow widget: Widget cardController ( SwipeableWidgetController cardController ) { return Row ( mainAxisAlignment: MainAxisAlignment . spaceAround , children: < Widget > [ FlatButton ( child: Text ( \"Left\" ), onPressed: () => cardController . triggerSwipeLeft (), ), FlatButton ( child: Text ( \"Right\" ), onPressed: () => cardController . triggerSwipeRight (), ), ], ); } Tapping on the buttons swipes the cards to the left and right respectively.","title":"Using the SwipeableWidgetController"},{"location":"examples/basic/#improvements-you-can-make","text":"","title":"Improvements you can make"},{"location":"examples/basic/#1-make-cards-look-more-natural","text":"To do this, you can use the Tranform widgets to rotate the cards by a randomly generated angle, or even change the offset.","title":"1. Make cards look more natural"},{"location":"examples/basic/#2-disable-users-from-swiping-cards","text":"If you do need to disable a card, wrap SwipeableWidget with IgnorePointer . Check out this video for more information.","title":"2. Disable users from swiping cards"},{"location":"examples/low-performance/","text":"Lower performance devices example","title":"Lower performance example"},{"location":"examples/low-performance/#lower-performance-devices-example","text":"","title":"Lower performance devices example"},{"location":"guide/swipeable-widget-controller/","text":"Swipeable Widget Controller","title":"Swipeable widget controller"},{"location":"guide/swipeable-widget-controller/#swipeable-widget-controller","text":"","title":"Swipeable Widget Controller"},{"location":"guide/swipeable-widget-slide/","text":"Swipeable Widget Slide","title":"Swipeable widget slide"},{"location":"guide/swipeable-widget-slide/#swipeable-widget-slide","text":"","title":"Swipeable Widget Slide"},{"location":"guide/swipeable-widget/","text":"Swipeable Widget Parameters int animationDuration The animation duration that dictates - How long it takes the widget to move back to the origin - How long it takes for the widget to animate off the screen Default value: 700 double horizontalThreshold The position the swipeable widget is moved horizontally for it to be moved away. Once the widget is moved beyong this theshold, the function onHorizontalSwipe is called. This diagram in this video may help you visualize the correct position. Default value: 0.85 double verticalThreshold Not implemented yet. The position the swipeable is moved vertically for it to be moved away. Once the widget is moved beyong this theshold, the function onVerticalSwipe is called. This diagram in this video may help you visualize the correct position. Default value: 0.95 Function onLeftSwipe The function called when the card is moved beyond the left side horizontalThreshold (in terms of Align). If you're making a card game, this is where you would call the function that calls the next card. Function onRightSwipe Similar to onLeftSwipe SwipeableWidgetController swipeableWidgetController Controller that can swipe the card automatically (without user interaction). The following methods exist: - _swipeableWidgetController.triggerSwipeLeft() - _swipeableWidgetController.triggerSwipeRight() The below two also exist, but are not yet implemented: - _swipeableWidgetController.triggerSwipeTop() - _swipeableWidgetController.triggerSwipeBottom() double scrollSensitivity The multiplier value for dragging the cards. A higher value is recommended for larger displays. Widget child (required) The child widget, which will be swipeable. List children The widgets behind the child . These can be the other cards if it's a card game.","title":"Swipeable widget"},{"location":"guide/swipeable-widget/#swipeable-widget","text":"","title":"Swipeable Widget"},{"location":"guide/swipeable-widget/#parameters","text":"","title":"Parameters"},{"location":"guide/swipeable-widget/#int-animationduration","text":"The animation duration that dictates - How long it takes the widget to move back to the origin - How long it takes for the widget to animate off the screen Default value: 700","title":"int animationDuration"},{"location":"guide/swipeable-widget/#double-horizontalthreshold","text":"The position the swipeable widget is moved horizontally for it to be moved away. Once the widget is moved beyong this theshold, the function onHorizontalSwipe is called. This diagram in this video may help you visualize the correct position. Default value: 0.85","title":"double horizontalThreshold"},{"location":"guide/swipeable-widget/#double-verticalthreshold","text":"Not implemented yet. The position the swipeable is moved vertically for it to be moved away. Once the widget is moved beyong this theshold, the function onVerticalSwipe is called. This diagram in this video may help you visualize the correct position. Default value: 0.95","title":"double verticalThreshold"},{"location":"guide/swipeable-widget/#function-onleftswipe","text":"The function called when the card is moved beyond the left side horizontalThreshold (in terms of Align). If you're making a card game, this is where you would call the function that calls the next card.","title":"Function onLeftSwipe"},{"location":"guide/swipeable-widget/#function-onrightswipe","text":"Similar to onLeftSwipe","title":"Function onRightSwipe"},{"location":"guide/swipeable-widget/#swipeablewidgetcontroller-swipeablewidgetcontroller","text":"Controller that can swipe the card automatically (without user interaction). The following methods exist: - _swipeableWidgetController.triggerSwipeLeft() - _swipeableWidgetController.triggerSwipeRight() The below two also exist, but are not yet implemented: - _swipeableWidgetController.triggerSwipeTop() - _swipeableWidgetController.triggerSwipeBottom()","title":"SwipeableWidgetController swipeableWidgetController"},{"location":"guide/swipeable-widget/#double-scrollsensitivity","text":"The multiplier value for dragging the cards. A higher value is recommended for larger displays.","title":"double scrollSensitivity"},{"location":"guide/swipeable-widget/#widget-child-required","text":"The child widget, which will be swipeable.","title":"Widget child (required)"},{"location":"guide/swipeable-widget/#list-children","text":"The widgets behind the child . These can be the other cards if it's a card game.","title":"List children"}]}